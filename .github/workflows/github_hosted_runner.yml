name: ELN GitHub Actions 1

on:
  workflow_dispatch:
  push:
    branches: [ ELN ]

#TODO: github actions save expression as environment variable
# env:
#   SKIP_ALL: "!contains(github.event.commits[0].message, 'skip all tests')"
#   SKIP_JS: "!contains(github.event.commits[0].message, 'skip unitjs')"
#   SKIP_RB: "!contains(github.event.commits[0].message, 'skip unitrb')"
#   SKIP_ACC: "!contains(github.event.commits[0].message, 'skip acceptance')"
  #SKIP_INSTALL: "!contains(github.event.commits[0].message, 'skip installation')"

jobs:

  # log:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Logging
  #       run: |
  #         echo " ${{ github.event.commits[0].message }} "s
  #         echo "!contains(github.event.commits[0].message, 'skip all tests')"

  checkout:
    #needs: docker
    runs-on: ubuntu-latest
    container: "complat/complat-ubuntu-runner:0.12.20"

    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: 123456
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      # - name: Check file existence
      #   id: check_files
      #   uses: andstor/file-existence-action@v1
      #   with:
      #     files: 
      - name: checkout
      # todo always checkout?
        #if: steps.check_files.outputs.files_exists == 'false'
        uses: actions/checkout@v2
        with:
          repository: ComPlat/chemotion_ELN
          #path:
      - name: change config files
        run: |
            cd config
            cp database.yml.gitlab database.yml
            cp -f storage.yml.example storage.yml
            touch datacollectors.yml
            cp -f profile_default.yml.example profile_default.yml
            touch klasses.json

      - name: Docker
        run: |
            pwd 
            ls

      # - name: Set up Ruby
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: 2.6.6

      # - name: Cache Ruby Gems
      #   uses: actions/cache@v2
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gems-
    
      # - name: Bundle Install
      #   run: |
      #     echo "CONFIGS"
      #     echo "BUNDLE: $(bundle -v)"
      #     echo "RAILS(rails -v)"
      #     echo "RUBY: $(ruby -v)"
      #     bundle config path vendor/bundle
      #     bundle install -j 3 --retry 3 --full-index --path vendor/bundle
      #     echo "SIZE BUNDLE: $(du -bsh vendor/bundle)"
      # - name: unit test ruby
      #   env:
      #     PG_DATABASE: chemotion_test
      #     PG_HOST: localhost
      #     PG_USER: chemotion_test
      #     PG_PASSWORD: 123456
      #     RAILS_ENV: test
      #     # WITH_COVERAGE: true
      #     # DISABLE_SPRING: 1
      #   run: |
      #     # bin/rails db:setup
      #     # rm RAILS_ENV=test?
      #     RAILS_ENV=test bundle exec rake db:test:prepare --trace && bundle exec rspec spec/api/user_api_spec.rb --trace
      #     # bundle exec rspec --exclude-pattern spec/{features}/**/*_spec.rb


      # - uses: actions/cache@v2
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-gems-${{ hashFiles('**/package.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gems-

      # - name: install node_modules and test
      #   uses: actions/setup-node@v1
      #   # rmv?
      #   with:
      #     node-version: 12.22.1
      #   #if: ${{ env.SKIP_ALL == 'false' && env.SKIP_INSTALL == 'false' }}
      # - name: npm install & test
      #   run: |
      #       pwd
      #       #ls

      #       # update npm 6 --> 7
      #       npm install -g npm@7.11.1

      #       # self install nvm + Node
      #       # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
      #       # export NVM_DIR="$HOME/.nvm"
      #       # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      #       # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      #       # nvm install v12.22.1

      #       echo "CONFIGS"
      #       echo "Node: $(node -v)"
      #       echo "npm: $(npm -v)"
      #       echo "nvm: $(nvm -v)"
      #       source ~/.nvm/nvm.sh && nvm use && npm i
      #       source ~/.nvm/nvm.sh && nvm use && npm test
