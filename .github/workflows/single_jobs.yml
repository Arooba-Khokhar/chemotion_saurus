name: ELN GitHub Actions

on:
  workflow_dispatch:
  push:
    branches: [ ELN ]

jobs:

  # (skip unitrb)
# (skip allunits)
# acceptance
# unitjs
  log:
    runs-on: self-hosted
    steps:
      - name: Logging
        run: |
          #echo "${{ github.event.head_commit.message[0] }}"
          echo " ${{ github.event.commits[0].message }} "
          #echo " ${{ github }}"

  # checkout:
  #   #needs: docker
  #   runs-on: self-hosted
  #   steps:
  #     # - name: Check file existence
  #     #   id: check_files
  #     #   uses: andstor/file-existence-action@v1
  #     #   with:
  #     #     files: 
  #     - name: init checkout ELN
  #     # todo always checkout?
  #       #if: steps.check_files.outputs.files_exists == 'false'
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ComPlat/chemotion_ELN
          #path:

  # config_files:
  #   #needs: checkout
  #   runs-on: self-hosted
  #   steps:
  #     - name: change config files
  #       run: |
  #           pwd
  #           ls
  #           cd config
  #           #cp database.yml.example database.yml
  #           cp -f storage.yml.example storage.yml
  #           touch datacollectors.yml
  #           cp -f profile_default.yml.example profile_default.yml
  #           touch klasses.json

  # gems_and_modules:
  #   needs: config_files
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-gems-
  #     - name: install packages
  #       run: |
  #           #cd gitlab-runner
  #           #rm Gemfile.lock
  #           # echo "BUNDLE FILES"
  #           # ls -la vendor/bundle
  #           # npm install -g npm@7.11.1
  #           source ~/.nvm/nvm.sh && nvm use && npm i

  #           #bundle config set --local path vendor/bundle
  #           #bundle install -j 3 --retry 3 --full-index --path shared/bundle
  #           bundle install -j 3 --retry 3 --full-index --path vendor/bundle

  #           echo "CONFIGS"
  #           #bundle config list
  #           bundle -v
  #           rails -v
  #           ruby -v
  #           node -v
  #           npm -v
  #           nvm -v
  #           echo "BROWSERIFY-RAILS"
  #           bundle info browserify-rails
  #           echo "OPENBABEL"
  #           bundle info openbabel


  testjs:
  #contains('Hello world', 'llo')
    # if: |
    #   "!contains(github.event.commits[0].message, 'skip unitjs')" || 
    #   "!contains(github.event.commits[0].message, 'skip alltests')"
    #if: ("!contains(github.event.commits[0].message, 'skip alltests')"  "!contains(github.event.commits[0].message, 'skip alltests')")
    if: !$skipall
    #needs: gems_and_modules
    runs-on: self-hosted
    steps:
    - name: unit tests JS
      run: |
        source ~/.nvm/nvm.sh && nvm use && npm test
      env:
        skipall: "!contains(github.event.commits[0].message, 'skip alltests')"

  # testrb:
    #if: "!contains(github.event.commits[0].message, 'skip unitrb')"
  #   needs: gems_and_modules
  #   runs-on: self-hosted
  #   services:
  #     # https://docs.github.com/en/actions/guides/creating-postgresql-service-containers#running-jobs-directly-on-the-runner-machine
  #     # Label used to access the service container
  #     postgres:
  #       image: postgres:12-alpine
  #       #env:
  #         # POSTGRES_DB: chemotion_test
  #         # POSTGRES_USER: chemotion_test
  #         #POSTGRES_PASSWORD: 123456
  #   steps:
  #     - name: unit tests ruby
  #       run: |
  #         RAILS_ENV=test bundle exec rake db:test:prepare && bundle exec rspec --exclude-pattern spec/{features}/**/*_spec.rb

  # testacceptance:
    # if: |
  #   needs: gems_and_modules
  #   runs-on: self-hosted
  #   services:
  #     # https://docs.github.com/en/actions/guides/creating-postgresql-service-containers#running-jobs-directly-on-the-runner-machine
  #     # Label used to access the service container
  #     postgres:
  #       image: postgres:12-alpine

  #   steps:
  #     - name: acceptance tests
  #       run: |
  #         RAILS_ENV=test bundle exec rake db:test:prepare && bundle exec rspec spec/features

  #     # - name: Setup tmate session
  #     #   uses: mxschmitt/action-tmate@v3
  #     #   with:
  #     #     sudo: true

  #       env:
  #         POSTGRES_HOST: localhost
  #         POSTGRES_PORT: 5432
